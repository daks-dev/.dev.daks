---
import Icon from './Icon.astro';
---

<theme-toggle>
  <button
    class:list={[
      'group',
      'flex cursor-pointer',
      'rounded-full bg-light-950 dark:bg-dark-950',
      'shadow-toggle-theme'
      // 'motion-safe:transition-colors duration-200'
    ]}>
    <span class='sr-only'>Dark theme</span>
    <span
      class:list={[
        'relative z-10 flex h-8 w-8 p-2',
        'text-impact-text-over dark:text-impact-overlay',
        'before:absolute before:inset-0 before:-z-10  before:content-null',
        'before:rounded-full before:bg-impact dark:before:translate-x-full',
        'ready:motion-safe:before:transition-transform ready:motion-safe:before:duration-200',
        'icon light'
      ]}>
      <Icon
        icon='sun'
        size='1rem'
      />
    </span>
    <span
      class:list={[
        'relative z-10 flex h-8 w-8 p-2',
        'text-impact-overlay dark:text-impact-text-over',
        'icon dark'
      ]}>
      <Icon
        icon='moon-stars'
        size='1rem'
      />
    </span>
  </button>
</theme-toggle>

{
  /*
<style>
  button {
    display: flex;
    padding: 0;
    background-color: var(--primary-950);
    border: 0;
    border-radius: 999rem;
    box-shadow: inset 0 0 0 1px var(--impact-overlay);
    cursor: pointer;
  }

  .icon {
    position: relative;
    z-index: 1;
    display: flex;
    padding: 0.5rem;
    color: var(--impact-overlay);
    font-size: 1rem;
    width: 2rem;
    height: 2rem;
  }

  .icon.light::before {
    position: absolute;
    z-index: -1;
    background-color: var(--impact);
    border-radius: 999rem;
    content: '';
    inset: 0;
  }

  :global(.theme-dark) .icon.light::before {
    transform: translateX(100%);
  }

  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light,
  button[aria-pressed='false'] .icon.light {
    color: var(--impact-text-over);
  }

  @media (prefers-reduced-motion: no-preference) {
    .icon,
    .icon.light::before {
      transition:
        transform var(--theme-transition),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .icon.light::before {
      background-color: SelectedItem;
    }
</style>
  */
}

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector('button')!;

      /** Set the theme to dark/light mode. */
      const setTheme = (dark: boolean) => {
        document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
        document.documentElement.classList[dark ? 'add' : 'remove']('dark');
        button.setAttribute('aria-pressed', String(dark));
      };

      // Toggle the theme when a user clicks the button.
      button.addEventListener('click', () => setTheme(!this.isDark()));

      // Initialize button state to reflect current theme.
      setTheme(this.isDark());
    }

    isDark() {
      return document.documentElement.classList.contains('theme-dark');
    }
  }
  customElements.define('theme-toggle', ThemeToggle);
</script>
