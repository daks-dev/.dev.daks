---
import Icon from '$lib/icons/Icon.astro';
---

<theme-toggle>
  <button
    class:list={[
      'group',
      'flex cursor-pointer',
      'rounded-full bg-light-950 dark:bg-dark-950',
      'shadow-toggle-theme'
      // 'motion-safe:transition-colors duration-200'
    ]}>
    <span class='sr-only'>Dark theme</span>
    <span
      class:list={[
        'relative z-10 flex h-8 w-8 p-2',
        'text-impact-text-over dark:text-impact-overlay',
        'before:absolute before:inset-0 before:-z-10  before:content-null',
        'before:rounded-full before:bg-impact dark:before:translate-x-full',
        'ready:motion-safe:before:transition-transform ready:motion-safe:before:duration-200',
        'icon light'
      ]}>
      <Icon
        icon='sun'
        size='1rem'
      />
    </span>
    <span
      class:list={[
        'relative z-10 flex h-8 w-8 p-2',
        'text-impact-overlay dark:text-impact-text-over',
        'icon dark'
      ]}>
      <Icon
        icon='moon-stars'
        size='1rem'
      />
    </span>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector('button')!;

      /** Set the theme to dark/light mode. */
      const setTheme = (dark: boolean) => {
        document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
        document.documentElement.classList[dark ? 'add' : 'remove']('dark');
        button.setAttribute('aria-pressed', String(dark));
      };

      // Toggle the theme when a user clicks the button.
      button.addEventListener('click', () => setTheme(!this.isDark()));

      // Initialize button state to reflect current theme.
      setTheme(this.isDark());
    }

    isDark() {
      return document.documentElement.classList.contains('theme-dark');
    }
  }
  customElements.define('theme-toggle', ThemeToggle);
</script>
