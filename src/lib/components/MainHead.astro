---
import '@/styles/global.css';

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const { title = 'DAKS.DEV: Personal Site', description = 'The personal site of DAKS.DEV' } =
  Astro.props;

// document.addEventListener('astro:after-swap', setTheme);
---

<meta charset='UTF-8' />
<meta
  name='description'
  property='og:description'
  content={description}
/>
<meta
  name='viewport'
  content='width=device-width'
/>
<meta
  name='generator'
  content={Astro.generator}
/>
<title>{title}</title>

<link
  rel='icon'
  type='image/svg+xml'
  href='/favicon.svg'
/>
<link
  rel='preconnect'
  href='https://fonts.googleapis.com'
/>
<link
  rel='preconnect'
  href='https://fonts.gstatic.com'
  crossorigin
/>
<link
  href='https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap'
  rel='stylesheet'
/>
<script is:inline>
  const getTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const setTheme = () => {
    const isDark = getTheme() === 'dark';
    document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

    if (typeof localStorage !== 'undefined') {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains('theme-dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      });
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    }
  };
  setTheme();
  document.addEventListener('astro:after-swap', setTheme);
</script>
