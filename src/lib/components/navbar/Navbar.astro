---
import Link from '$lib/ui/link/Link.astro';
import Icon from '$lib/ui/icon/Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import ToTop from './ToTop.astro';

import nav from '$lib/configs/nav';
const {
  navbar: { inners, outers }
} = nav;
---

<nav
  id='app-navbar'
  class:list={[
    'relative z-50 mb-8',
    'font-medium',
    'bp:px-20 bp:py-8',
    'bp:grid bp:h-32 bp:grid-cols-[1fr_auto_1fr] bp:items-center bp:gap-x-4'
  ]}>
  <div class:list={['p-6 bp:p-0', 'flex items-center justify-between gap-2', 'menu-header']}>
    <Link
      class:list={[
        'flex h-10 items-center gap-2',
        'leading-tight bp:text-xl',
        'text-light-400 no-underline dark:text-dark-400',
        'page:text-light dark:page:text-dark',
        'oversee:text-light oversee:hue-rotate-180 dark:oversee:text-dark',
        'transition duration-200'
      ]}
      href='/'>
      <Icon
        icon='code-block'
        class='text-light-impact disabled dark:text-dark-impact'
        size='2.1em'
        gradient
      />
      <span class:list={['bp:hidden', 'lg:inline']}>DAKS.DEV</span>
    </Link>
    <menu-button>
      <template>
        <button
          id='app-navbar-menu-toggle'
          class:list={[
            'relative flex p-2 ',
            'text-light-300 dark:text-dark-300',
            'bg-gradient-to-t',
            'from-light-900 to-light-500 to-150% dark:from-dark-700 dark:to-dark-900',
            'rounded-full',
            'shadow-md shadow-light-200 dark:shadow-dark-900',
            'aria-expanded:text-light dark:aria-expanded:text-dark',
            'aria-expanded:bg-gradient-to-b',
            'bp:hidden'
          ]}
          aria-label='menu toggle'
          aria-expanded='false'
          aria-controls='app-navbar-menu'>
          <span class='sr-only'>menu toggle</span>
          <Icon
            icon='list'
            size='1.5rem'
          />
        </button>
      </template>
    </menu-button>
  </div>
  <div
    id='app-navbar-menu'
    class='absolute inset-x-0 bp:contents'
    aria-owns='app-navbar-menu-toggle'
    hidden>
    <menu
      class:list={[
        'px-8 py-5',
        'flex list-none flex-col gap-4',
        'text-lg leading-tight',
        'bg-light-950 dark:bg-dark-950',
        'from-light-900 to-light-500 to-150% dark:from-dark-700 dark:to-dark-900',
        'border border-light-700 dark:border-dark-800',
        'bp:relative bp:px-2 bp:py-1.5',
        'bp:flex-row',
        'bp:text-sm',
        'bp:bg-gradient-to-t',
        'bp:rounded-full',
        'bp:shadow-md bp:shadow-light-200 dark:bp:shadow-dark-900'
      ]}>
      {
        inners.map(({ class: className, ...props }) => (
          <li>
            <Link
              class:list={['inner', className]}
              {...props}
            />
          </li>
        ))
      }
    </menu>
    <div
      class:list={[
        'py-6 pl-6 pr-8',
        'flex justify-between gap-3',
        'bg-light-950 dark:bg-dark-950',
        'rounded-lg rounded-t-none',
        'shadow-md dark:shadow-dark-800',
        'bp:p-0',
        'bp:items-center bp:justify-self-end',
        'bp:bg-transparent dark:bp:bg-transparent',
        'bp:shadow-none'
      ]}>
      {
        outers && (
          <div class:list={['flex flex-wrap gap-x-3', 'bp:hidden xl:flex xl:justify-end xl:gap-0']}>
            {outers.map(({ class: className, ...props }) => (
              <Link
                class:list={['outer', className]}
                size='1.625rem'
                {...props}
              />
            ))}
          </div>
        )
      }
      <div class='flex items-center'>
        <ThemeToggle />
      </div>
    </div>
  </div>

  <ToTop class:list={['mt-8 w-14 p-3', 'bg-light-500/50 dark:bg-dark-700/50', 'rounded-full']} />
</nav>

<script>
  class MenuButton extends HTMLElement {
    media = window.matchMedia('(min-width: 800px)');
    btn: HTMLButtonElement;
    menu: HTMLElement;

    constructor() {
      super();
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      this.btn = this.querySelector('button')!;
      this.menu = document.getElementById('app-navbar-menu')!;
      this.menu.hidden = true;
      this.check(this.media);
    }

    connectedCallback() {
      this.btn.addEventListener('click', () => this.set(this.menu.hidden));
      this.media.addEventListener('change', this.check);
      document.addEventListener('click', this.outside);
    }

    disconnectedCallback() {
      document.removeEventListener('click', this.outside);
    }

    set = (x: boolean) => {
      this.btn.setAttribute('aria-expanded', x ? 'true' : 'false');
      this.menu.hidden = !x;
    };

    check = (e: MediaQueryList | MediaQueryListEvent) => {
      this.set(e.matches);
      this.btn.hidden = e.matches;
    };

    outside = (e: Event) => {
      if (
        e?.target &&
        !this.btn.contains(e.target as Node) &&
        !this.menu.contains(e.target as Node)
      )
        this.check(this.media);
    };
  }

  customElements.define('menu-button', MenuButton);
</script>

<style lang="postcss">
  .inner {
    @apply block
           text-light-400 dark:text-dark-400
           aria-[current]:text-light dark:aria-[current]:text-dark
           no-underline
           bp:py-2 bp:px-4 bp:rounded-full
           bp:oversee:text-light-100 dark:bp:oversee:text-dark-100
           bp:oversee:bg-light-impact-subtle dark:bp:oversee:bg-dark-impact-subtle
           bp:page:bg-light-impact bp:page:text-light-impact-text
           dark:bp:page:bg-dark-impact dark:bp:page:text-dark-impact-text
           bp:ready:transition-colors bp:ready:duration-200
           forced-colors:text-selected;
  }

  .outer {
    @apply flex p-2
           oversee:text-light-impact-text dark:oversee:text-dark-impact-text
           text-light-impact-hard dark:text-dark-impact-hard
           no-underline
           ready:transition-colors ready:duration-200;
  }
</style>
